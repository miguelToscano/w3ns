type ApiError = variant {
  InterCanisterCallError : text;
  InsufficientCyclesReceived : text;
  TopicNotFound;
  ApiKeyNotFound;
  ApiKeyAlreadyExists;
  InvalidApiKey;
  SubscriberNotFound;
  InternalError;
  TopicAlreadyExists;
};
type ApiKey = record { value : text; owner : principal; created_at : nat64 };
type QueuedEmail = record {
  to : text;
  title : text;
  api_key : text;
  body : text;
};
type QueuedPush = record {
  title : text;
  api_key : text;
  body : text;
  firebase_token : text;
};
type QueuedSms = record { to : text; api_key : text; message : text };
type Result = variant { Ok; Err : ApiError };
type Result_1 = variant { Ok : nat64; Err : ApiError };
type SendEmailInput = record { to : text; title : text; body : text };
type SendPushInput = record {
  title : text;
  body : text;
  firebase_token : text;
};
type SendPushToTopicInput = record { title : text; topic : text; body : text };
type SendSmsInput = record { to : text; message : text };
type SubscribeUserToTopicInput = record {
  topic : text;
  registration_token : text;
};
type Topic = record {
  owner : principal;
  name : text;
  created_at : nat64;
  subscribers : vec text;
};
type UnsubscribeUserFromTopic = record {
  topic : text;
  registration_token : text;
};
service : {
  create_topic : (text) -> (Result);
  cycles : () -> (nat64) query;
  delete_topic : (text) -> (Result);
  dequeue_email_notifications : () -> (vec QueuedEmail);
  dequeue_push_notifications : () -> (vec QueuedPush);
  dequeue_sms_notifications : () -> (vec QueuedSms);
  enqueue_email_notification : (SendEmailInput) -> (Result);
  enqueue_push_notification : (SendPushInput) -> (Result);
  enqueue_sms_notification : (SendSmsInput) -> (Result);
  get_all : () -> (vec ApiKey) query;
  get_queued_email_notifications : () -> (vec QueuedEmail) query;
  get_queued_push_notifications : () -> (vec QueuedPush) query;
  get_queued_sms_notifications : () -> (vec QueuedSms) query;
  get_topics : () -> (vec Topic) query;
  has_key_registered : () -> (bool) query;
  name : () -> (text) query;
  register_key : (text) -> (Result);
  remove_key : () -> (Result);
  send_email : (SendEmailInput) -> (Result_1);
  send_push : (SendPushInput) -> (Result_1);
  send_push_to_topic : (SendPushToTopicInput) -> (Result_1);
  send_sms : (SendSmsInput) -> (Result_1);
  subscribe_user_to_topic : (SubscribeUserToTopicInput) -> (Result);
  unsubscribe_user_from_topic : (UnsubscribeUserFromTopic) -> (Result);
  whoami : () -> (principal) query;
}